# SET VARIABLES
## Bypass MacOS Gatekeeper for Homebrew Cask Installs
export HOMEBREW_CASK_OPTS="--no-quarantine"
## Set null to use bat instead of cat
export NULLCMD=bat

# CHANGE ZSH OPTIONS

# CREATE ALIASES
## Coloured output for ls and git status using exa
alias ls="exa -laFh --git --icons"
alias exa="exa -laFh --git --icons"
## Syntax highlighting for man (manual) pages using bat-extras
alias man=batman
## Syntax highlighting for grep (search) using bat-extras
alias grep=batgrep
## Shows the path variable, split by newline, in bat (default: cat)
alias trail='<<<${(F)path}'
## Remove to system trash
alias rm=trash
## neovim
alias vi='nvim'
alias vim='nvim'
alias vimdiff='nvim -d'
export EDITOR=nvim
## zshrc
alias zshrc="vim ~/.zshrc && source ~/.zshrc"

# CUSTOMISE PROMPT(S)
# autoload colors
# colors
# source ~/.dotfiles/dotfiles/config/zsh/themes/over-10k.zsh-theme

# ADD LOCATIONS TO $path Array VARIABLE
typeset -U path
path=(
  $path
  "/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
)

# USE ZSH PLUGINS
source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source ~/.dotfiles/dotfiles/config/zsh/plugins/nvm.zsh
source /opt/homebrew/etc/profile.d/z.sh
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

## starship
eval "$(starship init zsh)"

## iterm2
bindkey "^X^_" redo
bindkey "^X\x7f" backward-kill-line
bindkey "^U" backward-kill-line

## flavours
export FLAVOURS_DATA_DIRECTORY="$HOME/.local/share/flavours"
export FLAVOURS_CONFIG_FILE="$HOME/.config/flavours/config.toml"

## pyenv
### TODO: This currently seems irrelevant as it does not add anything to $PATH.
# local pyenv_path="$HOME/.pyenv"
# export PYENV_ROOT="$HOME/.pyenv"
# command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"

## puppeteer
export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
export PUPPETEER_EXECUTABLE_PATH=$(which chromium)

## 1password
source /Users/elliott/.config/op/plugins.sh
export SSH_AUTH_SOCK=~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock

## llvm (rust and tmux)
export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"

## azure-functions-core-tools
### Opt-out of telemetry (data collection by Microsoft)
export FUNCTIONS_CORE_TOOLS_TELEMETRY_OPTOUT=true

## nvm
### place this after nvm initialization!
### https://github.com/nvm-sh/nvm#zsh
autoload -U add-zsh-hook

load-nvmrc() {
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    # echo "Reverting to nvm default version"
    nvm use default
  fi
}

add-zsh-hook chpwd load-nvmrc
load-nvmrc

# WRITE FUNCTIONS
function mkcd() {
  mkdir -p "$@" && cd "$_"
}

function cdls() {
  cd "$@" && command exa
}

# ...AND OTHER SUPRISES
## Some useful options (man zshoptions)
zle_highlight=('paste:none')

## Basic auto/tab complete:
ZSH_DISABLE_COMPFIX=true
autoload -Uz compinit && compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'm:{a-zA-Z}={A-Za-z} l:|=* r:|=*'
zmodload zsh/complist
_comp_options+=(globdots)

# OS FIXES
## mac
### not all terminals set the $TERM_PROGRAM variable used by neovim

get_term_program() {
  local list=("Apple_Terminal" "iTerm2")
  local current_program="$TERM_PROGRAM"

  if [[ -z "$current_program" || ! "${list[*]}" =~ (^|[[:space:]])"$current_program"($|[[:space:]]) ]]; then
    current_program="$(osascript -e 'tell application "System Events" to name of the first process whose frontmost is true')"
    export TERM_PROGRAM="$current_program"
  fi

  echo "$current_program"
}

# Call the function to set the initial value and export it
TERM_PROGRAM=$(get_term_program)
export TERM_PROGRAM

# Define an alias for the function to be called when accessing $TERM_PROGRAM
alias TERM_PROGRAM=get_term_program

### find the id of a program
function findappid() {
  local app_list=$(find /Applications -iname '*.app' -maxdepth 1 -exec basename {} \; | sed 's/\.app$//')
  app_list+=("Finder")
  local selected_app=$(printf '%s\n' "${app_list[@]}" | sort -r | fzf --query="$(IFS=' '; echo "$*")" -1)

  if [ -n "$selected_app" ]; then
    osascript -e "id of app \"$selected_app\""
  fi
}
