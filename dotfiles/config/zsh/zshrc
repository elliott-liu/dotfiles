# SET VARIABLES

# -----------------------------
# ------ GLOBAL VARIABLES -----
# -----------------------------

# set null to use bat instead of cat
export NULLCMD=bat

# -----------------------------
# -------- ZSH OPTIONS --------
# -----------------------------

# add locations TO $path Array VARIABLE
typeset -U path

# USE ZSH PLUGINS
source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh

## some useful options (man zshoptions)
zle_highlight=('paste:none')
setopt AUTO_CD

# basic auto/tab complete:
ZSH_DISABLE_COMPFIX=true
autoload -Uz compinit && compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'm:{a-zA-Z}={A-Za-z} l:|=* r:|=*'
zmodload zsh/complist
_comp_options+=(globdots)

# -----------------------------
# ---------- ALIASES ----------
# -----------------------------

# syntax highlighting for grep (search) using bat-extras
alias grep=batgrep

# coloured ls and git status using eza
alias ls="eza --header --all --long --time-style=long-iso --git --icons=always --classify=always"

# alias of eza to exa for backwards compatibility
alias exa="eza --header --all --long --time-style=long-iso --git --icons=always --classify=always"

## remove to system trash
alias rm=trash

# source and edit zshrc
alias zshrc="nvim $HOME/.zshrc && source $HOME/.zshrc"

# shows the path variable, split by newline, in bat (default: cat)
alias trail='<<<${(F)path}'

# make directory and cd into it
function mkcd() {
  mkdir -p "$@" && cd "$_"
}

# cd into a directory and list contents
function cdls() {
  cd "$@" && command eza --all
}

# fzf list directories and cd into selected
function lscd() {
  local ls_dir=$(command eza "$@" --header --all --long --git --classify | command awk 'NR==1 || $NF ~ /\/$/' | command fzf --header-lines=1 --nth=-1 --ansi --color=16 --layout=default | command awk '{print $NF}')

  if [ -n "$ls_dir" ]; then
    cd "$@/$ls_dir"
  fi
}

# add git files using fzf (work in progress)
git_fzf_adder() {
  git ls-files -m -o --exclude-standard | command fzf --ansi --preview="command batdiff {..} --color=always --delta=true" --preview-window=top:75%,border:sharp --bind "enter:execute(git add {1})" --bind "load:reload(git ls-files -m -o --exclude-standard)" --bind="ctrl-p:execute:(git add -p {1})" --header "Press Enter to add the entire file, or CTRL + p to patch the file" --bind="zero:abort"
}

# find the id of a program
function findappid() {
  local app_list=$(command find /Applications -iname '*.app' -maxdepth 1 -exec basename {} \; | command sed 's/\.app$//')
  app_list+=("Finder")
  local selected_app=$(command printf '%s\n' "${app_list[@]}" | command sort -r | command fzf --query="$(
    IFS=' '
    echo "$*"
  )" -1)

  if [ -n "$selected_app" ]; then
    osascript -e "id of app \"$selected_app\""
  fi
}

# -----------------------------
# --------- OSX FIXES ---------
# -----------------------------

# not all terminals set the $TERM_PROGRAM variable used by neovim
get_term_program() {
  local list=("Apple_Terminal" "iTerm2")
  local current_program="$TERM_PROGRAM"

  if [[ -z "$current_program" || ! "${list[*]}" =~ (^|[[:space:]])"$current_program"($|[[:space:]]) ]]; then
    current_program="$(osascript -e 'tell application "System Events" to name of the first process whose frontmost is true')"
    export TERM_PROGRAM="$current_program"
  fi

  echo "$current_program"
}

# call the function to set the initial value and export it
TERM_PROGRAM=$(get_term_program)
export TERM_PROGRAM

# define an alias for the function to be called when accessing $TERM_PROGRAM
alias TERM_PROGRAM=get_term_program

# -----------------------------
# ---------- PLUGINS ----------
# -----------------------------

# homebrew
export PATH="/opt/homebrew/bin:$PATH"
export HOMEBREW_CASK_OPTS="--no-quarantine" # bypass MacOS Gatekeeper for cask installs

# neovim
if [[ "$(command -v nvim)" ]]; then
  export EDITOR='nvim'
  export MANPAGER='nvim +Man!'
  export MANWIDTH=999
  alias vi='nvim'
  alias vim='nvim'
  alias vimdiff='nvim -d'
fi

# vscode
export PATH="\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"

# batdiff
export BATDIFF_USE_DELTA=true

# zoxide
source /opt/homebrew/etc/profile.d/z.sh

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
alias fzf="command fzf --preview 'command bat {..} --color=always'"

# starship
eval "$(starship init zsh)"

# flavours
export FLAVOURS_DATA_DIRECTORY="$HOME/.local/share/flavours"
export FLAVOURS_CONFIG_FILE="$HOME/Library/Preferences/flavours/config.toml"

# ghostty
if [[ -n $GHOSTTY_RESOURCES_DIR ]]; then
  source $GHOSTTY_RESOURCES_DIR/shell-integration/zsh/ghostty-integration # load zsh integration
fi

# iterm
# bindkey "^X^_" redo
# bindkey "^X\x7f" backward-kill-line
# bindkey "^U" backward-kill-line

# puppeteer
export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
export PUPPETEER_EXECUTABLE_PATH=$(which chromium)

# 1password
source /Users/elliott/.config/op/plugins.sh
export SSH_AUTH_SOCK=~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock

# llvm
export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"

# rust
export PATH="$HOME/.cargo/bin:$PATH"
source "$HOME/.cargo/env"

# azure-functions-core-tools
export FUNCTIONS_CORE_TOOLS_TELEMETRY_OPTOUT=true # opt-out data collection

## opam (ocaml)
[[ ! -r /Users/elliott/.opam/opam-init/init.zsh ]] || source /Users/elliott/.opam/opam-init/init.zsh >/dev/null 2>/dev/null
eval $(opam env --switch=default)

# nvm
source ~/.dotfiles/dotfiles/config/zsh/plugins/nvm.zsh

autoload -U add-zsh-hook # place this after nvm initialization https://github.com/nvm-sh/nvm#zsh
load-nvmrc() {
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    # echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

# anaconda
export PATH=$HOME/anaconda3/bin:$PATH

# conda
export CONDA_VERBOSE=1 # Low verbosity (default) = 1 / Minimal verbosity (no debug messages) = 1

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/anaconda3/bin/conda' 'shell.zsh' 'hook' 2>/dev/null)"
if [ $? -eq 0 ]; then
  eval "$__conda_setup"
else
  if [ -f "/opt/homebrew/anaconda3/etc/profile.d/conda.sh" ]; then
    . "/opt/homebrew/anaconda3/etc/profile.d/conda.sh"
  else
    export PATH="/opt/homebrew/anaconda3/bin:$PATH"
  fi
fi
unset __conda_setup
# <<< conda initialize <<<
